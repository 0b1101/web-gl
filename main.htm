<html>

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <title>WebGL</title>
  <script type="text/javascript" src="./node_modules/glMatrix-0.9.5.min.js"></script>
  <script type="text/javascript" src="./node_modules/webgl-utils.js"></script>
  <script id="shader-fs" type="x-shader/x-fragment">
  precision mediump float;
  varying vec4 vColor;
  void main(void) {
    gl_FragColor = vColor;
  }
</script>
  <script id="shader-vs" type="x-shader/x-vertex">
  attribute vec3 aVertexPosition;
  attribute vec4 aVertexColor;
  uniform mat4 uMVMatrix;
  uniform mat4 uPMatrix;
  varying vec4 vColor;
  void main(void) {
    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
    vColor = aVertexColor;
  }
</script>
  <script type="text/javascript">

    /* ambient init */
    var gl;

    function initGL(canvas) {
      try {
        gl = canvas.getContext("experimental-webgl");
        gl.viewportWidth = canvas.width;
        gl.viewportHeight = canvas.height;
      } catch (e) {
      }
      if (!gl) {
        alert("Could not initialise WebGL, sorry :(");
      }
    }


    /* shader init */
    function getShader(gl, id) {
      var shaderScript = document.getElementById(id);
      if (!shaderScript) {
        return null;
      }

      var str = "";
      var k = shaderScript.firstChild;

      while (k) {
        if (k.nodeType == 3) {
          str += k.textContent;
        }
        k = k.nextSibling;
      }

      var shader;
      if (shaderScript.type == "x-shader/x-fragment") {
        shader = gl.createShader(gl.FRAGMENT_SHADER);
      } else if (shaderScript.type == "x-shader/x-vertex") {
        shader = gl.createShader(gl.VERTEX_SHADER);
      } else {
        return null;
      }

      gl.shaderSource(shader, str);
      gl.compileShader(shader);

      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        alert(gl.getShaderInfoLog(shader));
        return null;
      }

      return shader;
    }

    var shaderProgram;

    function initShaders() {
      var fragmentShader = getShader(gl, "shader-fs");
      var vertexShader = getShader(gl, "shader-vs");

      shaderProgram = gl.createProgram();
      gl.attachShader(shaderProgram, vertexShader);
      gl.attachShader(shaderProgram, fragmentShader);
      gl.linkProgram(shaderProgram);

      if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        alert("Could not initialise shaders");
      }

      gl.useProgram(shaderProgram);

      shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
      gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

      shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
      gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);

      shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
      shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
    }

    var pXPos = 0;
    var pZPos = 0;

    var xRot = 10;
    var x2Rot = 10;
    var xSpeed = 10;

    var yRot = 10;
    var y2Rot = 10;
    var ySpeed = 10;

    var z = -8.0;

    var filter = 0;


    var currentlyPressedKeys = {};


    function degToRad(degrees) {
      return degrees * Math.PI / 180;
    }


    function handleKeyDown(event) {
      currentlyPressedKeys[event.keyCode] = true;

      if (String.fromCharCode(event.keyCode) == "F") {
        filter += 1;
        if (filter == 3) {
          filter = 0;
        }
      }

      switch (String.fromCharCode(event.keyCode)) {
        /* X controls */
        case ("W"): xRot += 30;
          break;
        case ("S"): xRot -= 30;
          break;

        /* Y controls */
        case ("A"): yRot -= 30;
          break;
        case ("D"): yRot += 30;
          break;

        /* color control */
        case ("1"): cubeVertexColorBuffer.itemSize = 4;
          break;
        case ("2"): cubeVertexColorBuffer.itemSize = 3;
          break;
        default:
          break;
      }
    }


    function handleKeyUp(event) {
      currentlyPressedKeys[event.keyCode] = false;
    }


    function handleKeys() {
      if (currentlyPressedKeys[33]) {
        // page up
        z -= 0.1;
      }
      if (currentlyPressedKeys[34]) {
        // page down
        z += 0.1;
      }
      if (currentlyPressedKeys[37]) {
        // left cursor key
        ySpeed -= 2;
      }
      if (currentlyPressedKeys[39]) {
        // right cursor key
        ySpeed += 2;
      }
      if (currentlyPressedKeys[38]) {
        // up cursor key
        xSpeed -= 2;
      }
      if (currentlyPressedKeys[40]) {
        // down cursor key
        xSpeed += 2;
      }
    }

    /* scene, object, geometry and texture init */
    var mvMatrix = mat4.create();
    var mvMatrixStack = [];

    var mvPyramidMatrix = mat4.create();
    var mvPyramidMatrixStack = [];

    var mvCube2Matrix = mat4.create();
    var mvCube2MatrixStack = [];

    var pMatrix = mat4.create();
    var pMatrixStack = [];

    /* general matrix init */
    function mvCubePushMatrix() {
      var copy = mat4.create();
      mat4.set(mvMatrix, copy);
      mvMatrixStack.push(copy);
    }

    function mvPyramidPushMatrix() {
      var copy = mat4.create();
      mat4.set(mvPyramidMatrix, copy);
      mvPyramidMatrixStack.push(copy);
    }

    function mvCube2PushMatrix() {
      var copy = mat4.create();
      mat4.set(mvCube2Matrix, copy);
      mvCube2MatrixStack.push(copy);
    }

    function pPushMatrix() {
      var copy = mat4.create();
      mat4.set(pMatrix, copy);
      pMatrixStack.push(copy);
    }


    /* movement matrix init */
    function mvCubePopMatrix() {
      if (mvMatrixStack.length == 0) {
        throw "Invalid popMatrix!";
      }
      mvMatrix = mvMatrixStack.pop();
    }

    function mvPyramidPopMatrix() {
      if (mvPyramidMatrixStack.length == 0) {
        throw "Invalid popMatrix!";
      }
      mvPyramidMatrix = mvPyramidMatrixStack.pop();
    }

    function mvCube2PopMatrix() {
      if (mvCube2MatrixStack.length == 0) {
        throw "Invalid popMatrix!";
      }
      mvCube2Matrix = mvCube2MatrixStack.pop();
    }

    function pPopMatrix() {
      if (pMatrixStack.length == 0) {
        throw "Invalid popMatrix!";
      }
      pMatrix = pMatrixStack.pop();
    }

    function setCubeMatrixUniforms() {
      gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
      gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
    }

    function setPyramidMatrixUniforms() {
      gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
      gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvPyramidMatrix);
    }

    function setCube2MatrixUniforms() {
      gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
      gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvCube2Matrix);
    }


    /*------------- obj 1 definition -------------*/
    var cubeVertexPositionBuffer;
    var cubeVertexColorBuffer;
    var cubeVertexIndexBuffer;

    function initBuffers() {
      cubeVertexPositionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
      vertices = [
        /* front face: red */
        -1.0, -1.0, 1.0,
        1.0, -1.0, 1.0,
        1.0, 1.0, 0.0,
        -1.0, 1.0, 1.0,

        /* back face: green */
        0.0, -1.0, -1.0,
        -1.0, 1.0, -1.0,
        1.0, 1.0, -1.0,
        1.0, -1.0, -1.0,

        /* top face: blue */
        -1.0, 1.0, -1.0,
        -1.0, 1.0, 1.0,
        1.0, 1.0, 0.0,
        1.0, 1.0, -1.0,

        /* bottom face: yellow */
        0.0, -1.0, -1.0,
        1.0, -1.0, -1.0,
        1.0, -1.0, 1.0,
        -1.0, -1.0, 1.0,

        /* right face: magent */
        1.0, -1.0, -1.0,
        1.0, 1.0, -1.0,
        1.0, 1.0, 0.0,
        1.0, -1.0, 1.0,

        /* left face: cyan */
        0.0, -1.0, -1.0,
        -1.0, -1.0, 1.0,
        -1.0, 1.0, 1.0,
        -1.0, 1.0, -1.0
      ];

      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
      cubeVertexPositionBuffer.itemSize = 3;
      cubeVertexPositionBuffer.numItems = 12;

      /* color definition */
      cubeVertexColorBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);

      colors = [
        [1.0, 0.0, 0.0, 0.8], // front face:    red
        [0.0, 1.0, 0.0, 0.8], // back face:     green 
        [0.0, 0.0, 1.0, 0.8], // top face:      blue
        [1.0, 1.0, 0.0, 0.8], // bottom face:   yellow
        [1.0, 0.0, 1.0, 0.8], // right face:    magent
        [0.0, 1.0, 1.0, 0.8]  // left face:     cyan
      ];

      var unpackedColors = [];
      for (var i in colors) {
        var color = colors[i];
        for (var j = 0; j < 4; j++) {
          unpackedColors = unpackedColors.concat(color);
        }
      }

      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
      cubeVertexColorBuffer.itemSize = 3;
      cubeVertexColorBuffer.numItems = 24;

      /* triangle segmentation */
      cubeVertexIndexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);

      var cubeVertexIndices = [
        0, 1, 2, 0, 2, 3,       // front face
        4, 5, 6, 4, 6, 7,       // back face
        8, 9, 10, 8, 10, 11,    // top face
        12, 13, 14, 12, 14, 15, // bottom face
        16, 17, 18, 16, 18, 19, // right face
        20, 21, 22, 20, 22, 23  // left face
      ];

      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices),
        gl.STATIC_DRAW);
      cubeVertexIndexBuffer.itemSize = 4;
      cubeVertexIndexBuffer.numItems = 36;
    }

    var rCube = 0;


    /*------------- obj 2 definition -------------*/
    var PyramidVertexPositionBuffer;
    var PyramidVertexColorBuffer;
    var PyramidVertexIndexBuffer;

    function initBuffers2() {
      PyramidVertexPositionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, PyramidVertexPositionBuffer);
      vertices = [
        /* front face: red */
        -1.0, -1.0, 1.0,
        1.0, -1.0, 1.0,
        0.0, 1.0, 0.0,

        /* back face: green */
        -1.0, -1.0, -1.0,
        1.0, -1.0, -1.0,
        0.0, 1.0, 0.0,

        /* bottom face: yellow */
        -1.0, -1.0, -1.0,
        1.0, -1.0, -1.0,
        1.0, -1.0, 1.0,
        -1.0, -1.0, 1.0,

        /* right face: magent */
        1.0, -1.0, -1.0,
        1.0, -1.0, 1.0,
        0.0, 1.0, 0.0,

        /* left face: cyan */
        -1.0, -1.0, -1.0,
        -1.0, -1.0, 1.0,
        0.0, 1.0, 0.0
      ];

      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
      PyramidVertexPositionBuffer.itemSize = 3;
      PyramidVertexPositionBuffer.numItems = 16;

      /* color definition */
      PyramidVertexColorBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, PyramidVertexColorBuffer);
      colors = [
        [1.0, 0.0, 0.0, 1.0],  // front face: red
        [1.0, 0.0, 0.0, 1.0],
        [1.0, 0.0, 0.0, 1.0],
        [0.0, 1.0, 0.0, 1.0],  // back face: green 
        [0.0, 1.0, 0.0, 1.0],
        [0.0, 1.0, 0.0, 1.0],
        [1.0, 1.0, 0.0, 1.0],  // bottom face: yellow
        [1.0, 1.0, 0.0, 1.0],
        [1.0, 1.0, 0.0, 1.0],
        [1.0, 1.0, 0.0, 1.0],
        [1.0, 0.0, 1.0, 1.0],  // right face: magent
        [1.0, 0.0, 1.0, 1.0],
        [1.0, 0.0, 1.0, 1.0],
        [0.0, 1.0, 1.0, 1.0],  // left face: cyan
        [0.0, 1.0, 1.0, 1.0],
        [0.0, 1.0, 1.0, 1.0]
      ];

      var unpackedColors = [];
      for (var i in colors) {
        var color = colors[i];
        unpackedColors = unpackedColors.concat(color);
      }

      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
      PyramidVertexColorBuffer.itemSize = 4;
      PyramidVertexColorBuffer.numItems = 16;


      /* triangle segmentation */
      PyramidVertexIndexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, PyramidVertexIndexBuffer);
      var PyramidVertexIndices = [
        0, 1, 2,            // front face
        3, 4, 5,            // back face
        6, 7, 8, 6, 8, 9,   // bottom face
        10, 11, 12,         // right face
        13, 14, 15,         // left face

      ];

      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(PyramidVertexIndices),
        gl.STATIC_DRAW);
      PyramidVertexIndexBuffer.itemSize = 1;
      PyramidVertexIndexBuffer.numItems = 18;
    }

    var rPyramid = 0;


    /*------------- obj 3 definition -------------*/
    var cube2VertexPositionBuffer;
    var cube2VertexColorBuffer;
    var cube2VertexIndexBuffer;

    function initBuffers3() {
      cube2VertexPositionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, cube2VertexPositionBuffer);
      vertices = [
        /* front face: red */
        -1.0, -1.0, 1.0,
        1.0, -1.0, 1.0,
        1.0, 1.0, 1.0,
        -1.0, 1.0, 1.0,

        /* back face: green */
        -1.0, -1.0, -1.0,
        -1.0, 1.0, -1.0,
        1.0, 1.0, -1.0,
        1.0, -1.0, -1.0,

        /* top face: blue */
        -1.0, 1.0, -1.0,
        -1.0, 1.0, 1.0,
        1.0, 1.0, 1.0,
        1.0, 1.0, -1.0,

        /* bottom face: yellow */
        -1.0, -1.0, -1.0,
        1.0, -1.0, -1.0,
        1.0, -1.0, 1.0,
        -1.0, -1.0, 1.0,

        /* right face: magent */
        1.0, -1.0, -1.0,
        1.0, 1.0, -1.0,
        1.0, 1.0, 1.0,
        1.0, -1.0, 1.0,

        /* left face: cyan */
        -1.0, -1.0, -1.0,
        -1.0, -1.0, 1.0,
        -1.0, 1.0, 1.0,
        -1.0, 1.0, -1.0
      ];

      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
      cube2VertexPositionBuffer.itemSize = 3;
      cube2VertexPositionBuffer.numItems = 24;


      /* color definitions */
      cube2VertexColorBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, cube2VertexColorBuffer);
      colors = [
        [1.0, 0.0, 0.0, 1.0],  // front face:   red
        [1.0, 0.0, 0.0, 1.0],  // back face:    green 
        [0.0, 0.0, 1.0, 1.0],  // top face:     blue
        [1.0, 1.0, 0.0, 1.0],  // bottom face:  yellow
        [1.0, 0.0, 1.0, 1.0],  // right face:   magent
        [0.0, 1.0, 1.0, 1.0]   // left face:    cyan
      ];

      var unpackedColors = [];
      for (var i in colors) {
        var color = colors[i];
        for (var j = 0; j < 4; j++) {
          unpackedColors = unpackedColors.concat(color);
        }
      }

      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(unpackedColors), gl.STATIC_DRAW);
      cube2VertexColorBuffer.itemSize = 4;
      cube2VertexColorBuffer.numItems = 24;

      /* triangle segmentation */
      cube2VertexIndexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cube2VertexIndexBuffer);

      var cube2VertexIndices = [
        0, 1, 2, 0, 2, 3,       // front face
        4, 5, 6, 4, 6, 7,       // back face
        8, 9, 10, 8, 10, 11,    // top face
        12, 13, 14, 12, 14, 15, // bottom face
        16, 17, 18, 16, 18, 19, // right face
        20, 21, 22, 20, 22, 23  // left face
      ];

      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cube2VertexIndices),
        gl.STATIC_DRAW);
      cube2VertexIndexBuffer.itemSize = 36;
      cube2VertexIndexBuffer.numItems = 36;
    }

    var r2Cube = 0;


    function drawScene() { // draw scene function
      gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

      mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.5, 100.0, pMatrix);
      mat4.identity(mvMatrix);
      mat4.translate(mvMatrix, [0, 0.0, -8.0]);

      mat4.identity(mvPyramidMatrix);
      mat4.translate(mvPyramidMatrix, [4.0, 0.0, -8.0]);

      mat4.identity(mvCube2Matrix);
      mat4.translate(mvCube2Matrix, [-4.0, 0.0, -8.0]);

      mat4.translate(pMatrix, [0.0, 0.0, 0]);

      mvCubePushMatrix();
      pPushMatrix();

      mat4.rotate(mvMatrix, 180, [1, 0, 0]);
      mat4.rotate(mvMatrix, 45, [0, 1, 0]);

      mat4.rotate(mvCube2Matrix, degToRad(x2Rot), [1, 0, 1]);
      mat4.rotate(mvCube2Matrix, degToRad(x2Rot), [0, 1, 0]);

      mat4.rotate(mvPyramidMatrix, degToRad(xRot), [1, 0, 0]);
      mat4.rotate(mvPyramidMatrix, degToRad(yRot), [0, 0, 1]);

      mat4.translate(pMatrix, [pXPos, 0, 0]);
      mat4.translate(pMatrix, [0, 0, pZPos]);


      // first cube settings
      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute,
        cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

      gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexColorBuffer);

      gl.vertexAttribPointer(shaderProgram.vertexColorAttribute,
        cubeVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
      setCubeMatrixUniforms();
      gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);

      mvCubePopMatrix();


      // second cube settings
      gl.bindBuffer(gl.ARRAY_BUFFER, cube2VertexPositionBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute,
        cube2VertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);


      gl.bindBuffer(gl.ARRAY_BUFFER, cube2VertexColorBuffer);

      gl.vertexAttribPointer(shaderProgram.vertexColorAttribute,
        cube2VertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cube2VertexIndexBuffer);
      setCube2MatrixUniforms();
      gl.drawElements(gl.TRIANGLES, cube2VertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);


      // pyramid settings
      gl.bindBuffer(gl.ARRAY_BUFFER, PyramidVertexPositionBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute,
        PyramidVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

      gl.bindBuffer(gl.ARRAY_BUFFER, PyramidVertexColorBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexColorAttribute,
        PyramidVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);

      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, PyramidVertexIndexBuffer);
      setPyramidMatrixUniforms();
      gl.drawElements(gl.TRIANGLES, PyramidVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);

      pPopMatrix();
    }

    var lastTime = 0;

    function animate() { // animate function
      var currentTime = new Date().getTime();
      if (lastTime != 0) {
        var elapsed = currentTime - lastTime;
        rCube -= (75 * elapsed) / 1000.0;

        xRot += (xSpeed * elapsed) / 1000.0;
        yRot += (ySpeed * elapsed) / 1000.0;

        x2Rot += (10 * elapsed) / 1000.0;
        y2Rot += (10 * elapsed) / 1000.0;

      }
      lastTime = currentTime;
    }

    function tick() {
      requestAnimFrame(tick);
      drawScene();
      animate();
    }

    function webGLStart() {
      var canvas = document.getElementById("Bianca");
      initGL(canvas);
      initShaders()
      initBuffers();
      initBuffers2();
      initBuffers3();
      gl.clearColor(0.0, 0.0, 0.0, 1.0);
      gl.enable(gl.DEPTH_TEST);

      document.onkeydown = handleKeyDown;
      document.onkeyup = handleKeyUp;

      tick();
    }</script>
</head>

<body onload="webGLStart();">
  <canvas id="Bianca" width="1200" height="600"></canvas>
  <h2>Controls:</h2>
  <h3>Color:</h3>
  <ul>
    <li><code>1 = Solid</code></li>
    <li><code>2 = Gradient</code></li>
  </ul>
  <h3>Camera:</h3>
  <ul>
    <li><code>W = xRot+</code></li>
    <li><code>S = xRot-</code></li>
    <li><code>D = yRot+</code></li>
    <li><code>A = yRot-</code></li>
  </ul>
</body>

</html>